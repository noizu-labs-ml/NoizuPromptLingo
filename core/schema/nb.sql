-- Noizu Knowledge Base Schema
-- Generated by: npl-load schema nb
-- Usage: sqlite3 .npl/nb/articles.sqlite < .npl/nb/schema.sql

CREATE TABLE IF NOT EXISTS articles (
  id VARCHAR(10) PRIMARY KEY,          -- Format: XX-NNN (e.g., ST-001, ML-005)
  topic VARCHAR(100) NOT NULL,
  title VARCHAR(200) NOT NULL,
  keywords TEXT,
  abstract TEXT,
  level ENUM('beginner','intermediate','advanced','postgrad') DEFAULT 'postgrad',
  status ENUM('draft','published','archived') DEFAULT 'published',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  access_count INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS sections (
  article_id VARCHAR(10) NOT NULL,
  chapter INTEGER NOT NULL,
  section INTEGER NOT NULL,
  title VARCHAR(200),
  content TEXT,
  content_type ENUM('markdown','code','diagram','interactive') DEFAULT 'markdown',
  metadata JSON,  -- Diagrams, resources, code snippets
  PRIMARY KEY (article_id, chapter, section),
  FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS cross_references (
  source_article VARCHAR(10) NOT NULL,
  source_section VARCHAR(20),
  target_article VARCHAR(10) NOT NULL,
  target_section VARCHAR(20),
  reference_type ENUM('see_also','prerequisite','extends','related') DEFAULT 'related',
  PRIMARY KEY (source_article, source_section, target_article, target_section),
  FOREIGN KEY (source_article) REFERENCES articles(id) ON DELETE CASCADE,
  FOREIGN KEY (target_article) REFERENCES articles(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS search_cache (
  query_hash VARCHAR(64) PRIMARY KEY,
  query TEXT NOT NULL,
  results JSON,
  generated_suggestions JSON,  -- AI-proposed articles not yet persisted
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expires_at TIMESTAMP
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_topic ON articles(topic);
CREATE INDEX IF NOT EXISTS idx_level ON articles(level);
CREATE INDEX IF NOT EXISTS idx_status ON articles(status);
CREATE INDEX IF NOT EXISTS idx_accessed ON articles(accessed_at DESC);
CREATE VIRTUAL TABLE IF NOT EXISTS articles_fts USING fts5(
  id, title, keywords, abstract, content='articles'
);

-- Triggers for FTS maintenance
CREATE TRIGGER IF NOT EXISTS articles_ai AFTER INSERT ON articles BEGIN
  INSERT INTO articles_fts(id, title, keywords, abstract) 
  VALUES (new.id, new.title, new.keywords, new.abstract);
END;

CREATE TRIGGER IF NOT EXISTS articles_au AFTER UPDATE ON articles BEGIN
  UPDATE articles_fts SET title = new.title, keywords = new.keywords, abstract = new.abstract
  WHERE id = new.id;
END;

CREATE TRIGGER IF NOT EXISTS articles_ad AFTER DELETE ON articles BEGIN
  DELETE FROM articles_fts WHERE id = old.id;
END;

-- Update timestamp trigger
CREATE TRIGGER IF NOT EXISTS update_article_timestamp 
AFTER UPDATE ON articles
BEGIN
  UPDATE articles SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
END;